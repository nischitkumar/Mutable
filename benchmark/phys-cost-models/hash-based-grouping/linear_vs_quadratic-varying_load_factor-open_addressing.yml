description: Linear vs. quadratic probing in open-addressing hash tables for hash-based grouping.
suite: phys-cost-models
benchmark: hash-based-grouping
name: linear vs. quadratic probing, varying load factor
readonly: true
chart:
    x:
        scale: linear
        type: Q
        label: 'Load factor of hash table'
    y:
        scale: linear
        type: Q
        label: 'Machine code execution time [ms]'
data:
    'Load_factors_multi_i32':
        file: 'benchmark/phys-cost-models/data/Load_factors_multi_i32.csv'
        format: 'csv'
        delimiter: ','
        header: 1
        attributes:
            'id': 'INT NOT NULL'
            'lf05': 'INT NOT NULL'
            'lf06': 'INT NOT NULL'
            'lf07': 'INT NOT NULL'
            'lf08': 'INT NOT NULL'
            'lf09': 'INT NOT NULL'
            'lf10': 'INT NOT NULL'
            'lf11': 'INT NOT NULL'
            'lf12': 'INT NOT NULL'
            'lf13': 'INT NOT NULL'
            'lf14': 'INT NOT NULL'
            'lf15': 'INT NOT NULL'
            'lf16': 'INT NOT NULL'
            'lf17': 'INT NOT NULL'
            'lf18': 'INT NOT NULL'
            'lf19': 'INT NOT NULL'
            'lf20': 'INT NOT NULL'
            'lf22': 'INT NOT NULL'
            'lf24': 'INT NOT NULL'
            'lf26': 'INT NOT NULL'
            'lf28': 'INT NOT NULL'
            'lf30': 'INT NOT NULL'
systems:
    mutable:
        args: >-
            --backend WasmV8
            --cardinality-estimator Injected
            --use-cardinality-file benchmark/phys-cost-models/hash-based-grouping/linear_vs_quadratic-varying_load_factor-open_addressing.json
            --data-layout Row
            --grouping-implementations HashBased
            --hash-table-implementation OpenAddressing
            --hash-table-max-load-factor 0.99999
            --insist-no-rehashing
            --no-simd
        configurations:
            'linear':
                args: --hash-table-probing-strategy Linear
                pattern: '^Execute machine code:.*'
            'quadratic':
                args: --hash-table-probing-strategy Quadratic
                pattern: '^Execute machine code:.*'
        cases:
            0.5: SELECT 1 FROM Load_factors_multi_i32 GROUP BY lf05;
            0.6: SELECT 1 FROM Load_factors_multi_i32 GROUP BY lf06;
            0.7: SELECT 1 FROM Load_factors_multi_i32 GROUP BY lf07;
            0.8: SELECT 1 FROM Load_factors_multi_i32 GROUP BY lf08;
            0.9: SELECT 1 FROM Load_factors_multi_i32 GROUP BY lf09;
            1.0: SELECT 1 FROM Load_factors_multi_i32 GROUP BY lf10;

# TODO: benchmark with different number of distinct values?
