description: binary join with group by
db: ours
query: |
    SELECT
        key,
        COUNT(),
        MIN(S.key),
        MAX(S.key),
        SUM(S.key),
        AVG(S.key),
        MIN(R.rfloat),
        MAX(R.rfloat),
        SUM(R.rfloat),
        AVG(R.rfloat)
    FROM
        R, S
    WHERE
        R.key = S.fkey
    GROUP BY
        R.key
    ORDER BY
        key
    ;
required: YES

stages:
    lexer:
        out: |
            -:1:1: SELECT TK_Select
            -:2:5: key TK_IDENTIFIER
            -:2:8: , TK_COMMA
            -:3:5: COUNT TK_IDENTIFIER
            -:3:10: ( TK_LPAR
            -:3:11: ) TK_RPAR
            -:3:12: , TK_COMMA
            -:4:5: MIN TK_IDENTIFIER
            -:4:8: ( TK_LPAR
            -:4:9: S TK_IDENTIFIER
            -:4:10: . TK_DOT
            -:4:11: key TK_IDENTIFIER
            -:4:14: ) TK_RPAR
            -:4:15: , TK_COMMA
            -:5:5: MAX TK_IDENTIFIER
            -:5:8: ( TK_LPAR
            -:5:9: S TK_IDENTIFIER
            -:5:10: . TK_DOT
            -:5:11: key TK_IDENTIFIER
            -:5:14: ) TK_RPAR
            -:5:15: , TK_COMMA
            -:6:5: SUM TK_IDENTIFIER
            -:6:8: ( TK_LPAR
            -:6:9: S TK_IDENTIFIER
            -:6:10: . TK_DOT
            -:6:11: key TK_IDENTIFIER
            -:6:14: ) TK_RPAR
            -:6:15: , TK_COMMA
            -:7:5: AVG TK_IDENTIFIER
            -:7:8: ( TK_LPAR
            -:7:9: S TK_IDENTIFIER
            -:7:10: . TK_DOT
            -:7:11: key TK_IDENTIFIER
            -:7:14: ) TK_RPAR
            -:7:15: , TK_COMMA
            -:8:5: MIN TK_IDENTIFIER
            -:8:8: ( TK_LPAR
            -:8:9: R TK_IDENTIFIER
            -:8:10: . TK_DOT
            -:8:11: rfloat TK_IDENTIFIER
            -:8:17: ) TK_RPAR
            -:8:18: , TK_COMMA
            -:9:5: MAX TK_IDENTIFIER
            -:9:8: ( TK_LPAR
            -:9:9: R TK_IDENTIFIER
            -:9:10: . TK_DOT
            -:9:11: rfloat TK_IDENTIFIER
            -:9:17: ) TK_RPAR
            -:9:18: , TK_COMMA
            -:10:5: SUM TK_IDENTIFIER
            -:10:8: ( TK_LPAR
            -:10:9: R TK_IDENTIFIER
            -:10:10: . TK_DOT
            -:10:11: rfloat TK_IDENTIFIER
            -:10:17: ) TK_RPAR
            -:10:18: , TK_COMMA
            -:11:5: AVG TK_IDENTIFIER
            -:11:8: ( TK_LPAR
            -:11:9: R TK_IDENTIFIER
            -:11:10: . TK_DOT
            -:11:11: rfloat TK_IDENTIFIER
            -:11:17: ) TK_RPAR
            -:12:1: FROM TK_From
            -:13:5: R TK_IDENTIFIER
            -:13:6: , TK_COMMA
            -:13:8: S TK_IDENTIFIER
            -:14:1: WHERE TK_Where
            -:15:5: R TK_IDENTIFIER
            -:15:6: . TK_DOT
            -:15:7: key TK_IDENTIFIER
            -:15:11: = TK_EQUAL
            -:15:13: S TK_IDENTIFIER
            -:15:14: . TK_DOT
            -:15:15: fkey TK_IDENTIFIER
            -:16:1: GROUP TK_Group
            -:16:7: BY TK_By
            -:17:5: R TK_IDENTIFIER
            -:17:6: . TK_DOT
            -:17:7: key TK_IDENTIFIER
            -:18:1: ORDER TK_Order
            -:18:7: BY TK_By
            -:19:5: key TK_IDENTIFIER
            -:20:1: ; TK_SEMICOL
        err: NULL
        num_err: 0
        returncode: 0

    parser:
        out: |
            SELECT key, COUNT(), MIN(S.key), MAX(S.key), SUM(S.key), AVG(S.key), MIN(R.rfloat), MAX(R.rfloat), SUM(R.rfloat), AVG(R.rfloat)
            FROM R, S
            WHERE (R.key = S.fkey)
            GROUP BY R.key
            ORDER BY key ASC;
        err: NULL
        num_err: 0
        returncode: 0

    sema:
        out: NULL
        err: NULL
        num_err: 0
        returncode: 0

    end2end:
        cli_args: --insist-no-ternary-logic
        # aggregate columns on R.rfloat rounded to nearest value
        out: |
           2,2,19,25,44,22,0.78799999,0.78799999,1.575999975204468,0.7879999876022339
           3,1,75,75,75,75,2.0950699,2.0950699,2.095069885253906,2.095069885253906
           5,1,2,2,2,2,3.99401,3.99401,3.994009971618652,3.994009971618652
           6,1,4,4,4,4,6.8028302,6.8028302,6.802830219268799,6.802830219268799
           7,2,50,70,120,60,5.0766301,5.0766301,10.15326023101807,5.076630115509033
           8,1,27,27,27,27,0.85653001,0.85653001,0.8565300107002258,0.8565300107002258
           11,2,51,55,106,53,4.0262098,4.0262098,8.052419662475586,4.026209831237793
           12,1,77,77,77,77,9.26367,9.26367,9.263669967651367,9.263669967651367
           13,2,81,94,175,87.5,4.8667102,4.8667102,9.733420372009277,4.866710186004639
           16,1,93,93,93,93,5.2894101,5.2894101,5.28941011428833,5.28941011428833
           17,2,11,67,78,39,9.05336,9.05336,18.10671997070312,9.053359985351562
           19,1,56,56,56,56,1.54553,1.54553,1.545529961585999,1.545529961585999
           20,1,61,61,61,61,8.5859299,8.5859299,8.585929870605469,8.585929870605469
           21,1,26,26,26,26,3.3115001,3.3115001,3.311500072479248,3.311500072479248
           22,1,10,10,10,10,0.01691,0.01691,0.0169099997729063,0.0169099997729063
           24,1,95,95,95,95,2.1370101,2.1370101,2.137010097503662,2.137010097503662
           25,2,15,43,58,29,6.11274,6.11274,12.22548007965088,6.112740039825439
           26,2,49,82,131,65.5,5.1795802,5.1795802,10.35916042327881,5.179580211639404
           27,1,86,86,86,86,7.4365501,7.4365501,7.436550140380859,7.436550140380859
           28,2,18,64,82,41,1.5280499,1.5280499,3.056099891662598,1.528049945831299
           29,1,32,32,32,32,8.5344801,8.5344801,8.534480094909668,8.534480094909668
           30,1,74,74,74,74,5.3412399,5.3412399,5.341239929199219,5.341239929199219
           31,1,48,48,48,48,4.7030702,4.7030702,4.703070163726807,4.703070163726807
           33,2,84,92,176,88,8.3057203,8.3057203,16.61144065856934,8.305720329284668
           36,1,57,57,57,57,0.85613,0.85613,0.8561300039291382,0.8561300039291382
           37,1,38,38,38,38,5.50388,5.50388,5.503880023956299,5.503880023956299
           39,1,66,66,66,66,1.84364,1.84364,1.843639969825745,1.843639969825745
           40,1,44,44,44,44,2.25687,2.25687,2.256870031356812,2.256870031356812
           41,1,69,69,69,69,1.56533,1.56533,1.565330028533936,1.565330028533936
           42,2,40,71,111,55.5,6.4763498,6.4763498,12.95269966125488,6.476349830627441
           43,2,42,89,131,65.5,8.8942299,8.8942299,17.78845977783203,8.894229888916016
           44,1,21,21,21,21,1.81489,1.81489,1.814890027046204,1.814890027046204
           48,1,35,35,35,35,8.2054901,8.2054901,8.205490112304688,8.205490112304688
           49,1,63,63,63,63,8.5601301,8.5601301,8.56013011932373,8.56013011932373
           50,2,36,59,95,47.5,5.25951,5.25951,10.51902008056641,5.259510040283203
           52,2,88,90,178,89,7.9614301,7.9614301,15.92286014556885,7.961430072784424
           53,2,14,41,55,27.5,6.6684098,6.6684098,13.33681964874268,6.668409824371338
           54,1,52,52,52,52,5.7192302,5.7192302,5.719230175018311,5.719230175018311
           56,1,80,80,80,80,7.4748101,7.4748101,7.474810123443604,7.474810123443604
           58,4,47,91,278,69.5,1.08346,1.08346,4.333839893341064,1.083459973335266
           60,1,5,5,5,5,4.4338298,4.4338298,4.433829784393311,4.433829784393311
           61,1,83,83,83,83,0.50579,0.50579,0.5057899951934814,0.5057899951934814
           62,2,46,73,119,59.5,2.5065401,2.5065401,5.01308012008667,2.506540060043335
           63,1,65,65,65,65,4.52005,4.52005,4.520050048828125,4.520050048828125
           65,2,12,45,57,28.5,4.3007002,4.3007002,8.601400375366211,4.300700187683105
           67,2,30,58,88,44,4.8218899,4.8218899,9.643779754638672,4.821889877319336
           70,1,1,1,1,1,6.7848601,6.7848601,6.784860134124756,6.784860134124756
           71,3,22,97,153,51,2.30111,2.30111,6.903330087661743,2.301110029220581
           73,3,7,96,123,41,1.9390399,1.9390399,5.817119836807251,1.939039945602417
           74,1,0,0,0,0,4.4890499,4.4890499,4.489049911499023,4.489049911499023
           78,1,76,76,76,76,1.28952,1.28952,1.289520025253296,1.289520025253296
           79,2,33,98,131,65.5,3.41732,3.41732,6.834640026092529,3.417320013046265
           80,1,62,62,62,62,8.3134499,8.3134499,8.313449859619141,8.313449859619141
           82,1,72,72,72,72,8.5116596,8.5116596,8.511659622192383,8.511659622192383
           83,2,9,60,69,34.5,2.2453899,2.2453899,4.490779876708984,2.245389938354492
           85,2,13,23,36,18,2.91272,2.91272,5.825439929962158,2.912719964981079
           87,2,29,85,114,57,1.82278,1.82278,3.645560026168823,1.822780013084412
           88,3,6,39,82,27.33333333333333,0.47804001,0.47804001,1.434120029211044,0.4780400097370148
           89,3,8,54,90,30,6.0245299,6.0245299,18.07358980178833,6.024529933929443
           90,1,3,3,3,3,0.75041002,0.75041002,0.7504100203514099,0.7504100203514099
           91,1,31,31,31,31,4.4992299,4.4992299,4.499229907989502,4.499229907989502
           92,1,16,16,16,16,9.9636497,9.9636497,9.963649749755859,9.963649749755859
           93,2,17,78,95,47.5,8.5136204,8.5136204,17.02724075317383,8.513620376586914
           95,1,79,79,79,79,9.6626501,9.6626501,9.662650108337402,9.662650108337402
           98,1,68,68,68,68,3.4019301,3.4019301,3.401930093765259,3.401930093765259
           99,2,24,99,123,61.5,4.1813502,4.1813502,8.362700462341309,4.181350231170654
        err: NULL
        num_err: 0
        returncode: 0
